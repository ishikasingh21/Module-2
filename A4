Source code: Coin Change Problem
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define MAX_COINS 100
#define MAX_SUM 10000
int min(int a, int b) {
    return (a < b) ? a : b;
}
int minCoins(int coins[], int n, int sum, int usedCoins[]) {
    int dp[n + 1][sum + 1];
    for (int i = 0; i <= n; i++) {
        for (int j = 0; j <= sum; j++) {
            if (j == 0)
                dp[i][j] = 0;
            else if (i == 0)
                dp[i][j] = MAX_SUM - 1;
            else if (coins[i - 1] <= j) {
                if (1 + dp[i][j - coins[i - 1]] < dp[i - 1][j]) {
                    dp[i][j] = 1 + dp[i][j - coins[i - 1]];
                    usedCoins[j] = coins[i - 1];
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
            else
                dp[i][j] = dp[i - 1][j];
        }
    }
    return dp[n][sum];
}

int main() {
    srand(time(0));
    printf("Enter number of coins: ");
    int nCoins;
    scanf("%d", &nCoins);
    printf("Enter range for coin values (minimum and maximum): ");
    int minRange, maxRange;
    scanf("%d %d", &minRange, &maxRange);
    int coinValues[MAX_COINS];
    printf("Randomly generated coin values: ");
    for (int i = 0; i < nCoins; i++) {
        coinValues[i] = rand() % (maxRange - minRange + 1) + minRange;
        printf("%d ", coinValues[i]);
    }
    printf("\nEnter target sum: ");
    int sumCoins;
    scanf("%d", &sumCoins);
    int usedCoins[MAX_SUM] = {0}; // Array to keep track of used coins
    int minCoinsRequired = minCoins(coinValues, nCoins, sumCoins, usedCoins);
    printf("\nMinimum number of coins required: %d\n", minCoinsRequired);
    printf("Coins used: ");
    int remainingSum = sumCoins;
    while (remainingSum > 0) {
        printf("%d ", usedCoins[remainingSum]);
        remainingSum -= usedCoins[remainingSum];
    }
    return 0;
}
Source Code: Longest Common Subsequence
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
#define MAX_LENGTH 80
char* generateRandomString() {
    srand(time(NULL));
    int length = rand() % 31 + 50;
    char* randomString = (char*)malloc((length + 1) * sizeof(char));
    if (randomString == NULL) {
        printf("Memory allocation failed.\n");
        exit(1);
    }
    const char characters[] = "agtc";
    for (int i = 0; i < length; i++) {
        int randomIndex = rand() % strlen(characters);
        randomString[i] = characters[randomIndex];
    }
    randomString[length] = '\0';
    return randomString;
}
char* lcs(char* X, char* Y, int m, int n) {
    int L[m + 1][n + 1];
    for (int i = 0; i <= m; i++) {
        for (int j = 0; j <= n; j++) {
            if (i == 0 || j == 0)
                L[i][j] = 0;
            else if (X[i - 1] == Y[j - 1])
                L[i][j] = L[i - 1][j - 1] + 1;
            else
                L[i][j] = (L[i - 1][j] > L[i][j - 1]) ? L[i - 1][j] : L[i][j - 1];
        }
    }
    int index = L[m][n];
    int temp = index;
    char* lcs = (char*)malloc((index + 1) * sizeof(char));
    if (lcs == NULL) {
        printf("Memory allocation failed.\n");
        exit(1);
    }
    int i = m, j = n;
    while (i > 0 && j > 0) {
        if (X[i - 1] == Y[j - 1]) {
            lcs[index - 1] = X[i - 1];
            i--;
            j--;
            index--;
        } else if (L[i - 1][j] > L[i][j - 1])
            i--;
        else
            j--;
    }
    lcs[temp] = '\0';
    return lcs;
}
int main() {
    char* text1 = generateRandomString();
    printf("Random DNA String 1: %s\n", text1);
    char* text2 = generateRandomString();
    printf("Random DNA String 2: %s\n", text2);
    int m = strlen(text1);
    int n = strlen(text2);
    char* lcsString = lcs(text1, text2, m, n);
    printf("Length of LCS is: %zu\n", strlen(lcsString));
    printf("LCS: %s\n", lcsString);
    free(text1);
    free(text2);
    free(lcsString);
    return 0;
}
Output: 

Coin Change Problem
 

 Longest Common Subsequence
 
